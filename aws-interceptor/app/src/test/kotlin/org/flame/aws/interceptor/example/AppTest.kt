/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.flame.aws.interceptor.example

import kotlinx.serialization.json.Json
import software.amazon.awssdk.auth.credentials.AwsBasicCredentials
import software.amazon.awssdk.auth.credentials.AwsCredentials
import software.amazon.awssdk.core.interceptor.ExecutionAttribute
import software.amazon.awssdk.core.interceptor.ExecutionAttributes
import software.amazon.awssdk.core.interceptor.InterceptorContext
import software.amazon.awssdk.http.SdkHttpMethod
import software.amazon.awssdk.http.SdkHttpRequest
import software.amazon.awssdk.regions.Region
import software.amazon.awssdk.services.s3.model.ListBucketsRequest
import java.util.*
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertNotEquals

class InterceptorTest {
    @Test fun handlesNullCredentials() {
        val i = Interceptor()

        val req = SdkHttpRequest.builder()
            .protocol("https")
            .host("original-host.example.com")
            .method(SdkHttpMethod.GET)
            .port(1234)
            .build()

        val attributes = ExecutionAttributes.builder()
            .build()

        val sdkRequest = ListBucketsRequest.builder()
            .build()

        val modifyRequest = InterceptorContext.builder()
            .httpRequest(req)
            .request(sdkRequest)
            .build()

        val ret = i.modifyHttpRequest(modifyRequest, attributes)
        assertEquals(req, ret)
    }

    @Test fun rejectsIfNotJWTlike() {
        val i = Interceptor()

        val credentials = AwsBasicCredentials.create("accessKey", "secretKey")

        val req = SdkHttpRequest.builder()
            .protocol("https")
            .host("original-host.example.com")
            .method(SdkHttpMethod.GET)
            .port(1234)
            .build()

        val attributes = ExecutionAttributes.builder()
            .put(ExecutionAttribute("SigningRegion"), Region.US_EAST_1)
            .put(ExecutionAttribute("ServiceSigningName"), "s3")
            .put(ExecutionAttribute<AwsCredentials>("AwsCredentials"), credentials)
            .build()

        val sdkRequest = ListBucketsRequest.builder()
            .build()

        val modifyRequest = InterceptorContext.builder()
            .httpRequest(req)
            .request(sdkRequest)
            .build()

        val ret = i.modifyHttpRequest(modifyRequest, attributes)
        assertEquals(req, ret)
    }

    @Test fun RejectsIfNotIssuedByUs() {
        val i = Interceptor()

        val secret = Json.encodeToString(AgentToken.serializer(), AgentToken("not-opsmx"))
        val encodedSecret = Base64.getEncoder().withoutPadding().encodeToString(secret.toByteArray())

        val credentials = AwsBasicCredentials.create("accessKey", "X.${encodedSecret}.X")

        val req = SdkHttpRequest.builder()
            .protocol("https")
            .host("original-host.example.com")
            .method(SdkHttpMethod.GET)
            .port(1234)
            .build()

        val attributes = ExecutionAttributes.builder()
            .put(ExecutionAttribute("SigningRegion"), Region.US_EAST_1)
            .put(ExecutionAttribute("ServiceSigningName"), "s3")
            .put(ExecutionAttribute<AwsCredentials>("AwsCredentials"), credentials)
            .build()

        val sdkRequest = ListBucketsRequest.builder()
            .build()

        val modifyRequest = InterceptorContext.builder()
            .httpRequest(req)
            .request(sdkRequest)
            .build()

        val ret = i.modifyHttpRequest(modifyRequest, attributes)
        assertEquals(req, ret)
    }


    @Test fun mutates() {
        val i = Interceptor()

        val secret = Json.encodeToString(AgentToken.serializer(), AgentToken("opsmx"))
        val encodedSecret = Base64.getEncoder().withoutPadding().encodeToString(secret.toByteArray())

        val credentials = AwsBasicCredentials.create("accessKey", "X.${encodedSecret}.X")

        val req = SdkHttpRequest.builder()
            .protocol("https")
            .host("original-host.example.com")
            .method(SdkHttpMethod.GET)
            .port(1234)
            .build()

        val attributes = ExecutionAttributes.builder()
            .put(ExecutionAttribute("SigningRegion"), Region.US_EAST_1)
            .put(ExecutionAttribute("ServiceSigningName"), "s3")
            .put(ExecutionAttribute<AwsCredentials>("AwsCredentials"), credentials)
            .build()

        val sdkRequest = ListBucketsRequest.builder()
            .build()

        val modifyRequest = InterceptorContext.builder()
            .httpRequest(req)
            .request(sdkRequest)
            .build()

        val ret = i.modifyHttpRequest(modifyRequest, attributes)
        assertNotEquals(req, ret)
        assertNotEquals("original-host.example.com", ret.host())
        assertNotEquals(1234, ret.port())
        val headers = ret.headers()
        assertEquals(listOf("original-host.example.com"), headers["x-opsmx-original-host"])
        assertEquals(listOf("1234"), headers["x-opsmx-original-port"])
        assertEquals(listOf("us-east-1"), headers["x-opsmx-signing-region"])
        assertEquals(listOf("s3"), headers["x-opsmx-service-signing-name"])
        assertEquals(listOf(credentials.secretAccessKey()), headers["x-opsmx-token"])
    }
}

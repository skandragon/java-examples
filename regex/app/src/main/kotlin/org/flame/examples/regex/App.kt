/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.flame.examples.regex

import java.io.File
import java.util.regex.Pattern
import kotlin.system.measureTimeMillis

data class WorkResult(val timestamp: String?, val hostname: String?, val process: String?, val pid: String?, val msg: String)

class App {

    private val lines: List<String>

    init {
        lines = readLines("/Users/explorer/git/github/skandragon/golang-experiments/regexp/simple/mail.log")
    }

    private val patterns = listOf(
        Pattern.compile("(?<timestamp>\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d+\\+\\d{2}:\\d{2})) (?<hostname>\\S+) (?<process>[^\\[\\:]+)(\\[(?<pid>\\d+)\\])*: (?<msg>.*)"),
    )

    private fun readLines(filename: String): List<String> = File(filename).useLines { it.toList() }

    fun run() {
        lateinit var lastItem : WorkResult
        val elapsed = measureTimeMillis {
            lines.forEach { line ->
                patterns.forEach { pattern ->
                    val matcher = pattern.matcher(line)
                    while (matcher.find()) {
                        lastItem = WorkResult(
                            matcher.group("timestamp"),
                            matcher.group("hostname"),
                            matcher.group("process"),
                            matcher.group("pid"),
                            matcher.group("msg")
                        )
                        //println(ret)
                    }
                }
            }
        }
        println(lastItem)
        val matchSteps = lines.size * patterns.size
        val durationSeconds = elapsed / 1000.0
        val matchesPerSecond = matchSteps / durationSeconds
        println("patterns: ${patterns.size}, lines ${lines.size}, matchCount $matchSteps, duration $durationSeconds s, $matchesPerSecond/sec")
    }
}

fun main() {
    App().run()
}
